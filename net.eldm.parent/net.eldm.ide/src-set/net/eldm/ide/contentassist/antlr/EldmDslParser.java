/*
 * generated by Xtext 2.15.0
 */
package net.eldm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import net.eldm.ide.contentassist.antlr.internal.InternalEldmDslParser;
import net.eldm.services.EldmDslGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class EldmDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EldmDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EldmDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getImportAccess().getAlternatives(), "rule__Import__Alternatives");
			builder.put(grammarAccess.getExternalDefAccess().getAlternatives(), "rule__ExternalDef__Alternatives");
			builder.put(grammarAccess.getExternalModuleAccess().getAlternatives(), "rule__ExternalModule__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives_1(), "rule__Operation__Alternatives_1");
			builder.put(grammarAccess.getParamDefAccess().getAlternatives(), "rule__ParamDef__Alternatives");
			builder.put(grammarAccess.getVariableDefAccess().getAlternatives(), "rule__VariableDef__Alternatives");
			builder.put(grammarAccess.getOperationCallAccess().getAlternatives_1(), "rule__OperationCall__Alternatives_1");
			builder.put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
			builder.put(grammarAccess.getTypeDefAccess().getAlternatives_2(), "rule__TypeDef__Alternatives_2");
			builder.put(grammarAccess.getTypeDefAccess().getParserAlternatives_2_0_0_0(), "rule__TypeDef__ParserAlternatives_2_0_0_0");
			builder.put(grammarAccess.getElementTypeDefAccess().getAlternatives(), "rule__ElementTypeDef__Alternatives");
			builder.put(grammarAccess.getValueDefAccess().getAlternatives(), "rule__ValueDef__Alternatives");
			builder.put(grammarAccess.getMapDefAccess().getAlternatives(), "rule__MapDef__Alternatives");
			builder.put(grammarAccess.getMapEntryDefAccess().getAlternatives_1(), "rule__MapEntryDef__Alternatives_1");
			builder.put(grammarAccess.getNativeDefAccess().getAlternatives(), "rule__NativeDef__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBoolLiteralAccess().getAlternatives_1(), "rule__BoolLiteral__Alternatives_1");
			builder.put(grammarAccess.getBREAKAccess().getAlternatives(), "rule__BREAK__Alternatives");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup_4(), "rule__Module__Group_4__0");
			builder.put(grammarAccess.getPlugDslAccess().getGroup(), "rule__PlugDsl__Group__0");
			builder.put(grammarAccess.getImportOperationAccess().getGroup(), "rule__ImportOperation__Group__0");
			builder.put(grammarAccess.getImportDefinitionAccess().getGroup(), "rule__ImportDefinition__Group__0");
			builder.put(grammarAccess.getImportDefinitionAccess().getGroup_0(), "rule__ImportDefinition__Group_0__0");
			builder.put(grammarAccess.getImportDefinitionAccess().getGroup_0_1(), "rule__ImportDefinition__Group_0_1__0");
			builder.put(grammarAccess.getExternalDefAccess().getGroup_0(), "rule__ExternalDef__Group_0__0");
			builder.put(grammarAccess.getExternalDefAccess().getGroup_0_1(), "rule__ExternalDef__Group_0_1__0");
			builder.put(grammarAccess.getExternalModuleAccess().getGroup_1(), "rule__ExternalModule__Group_1__0");
			builder.put(grammarAccess.getSubPathAccess().getGroup(), "rule__SubPath__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
			builder.put(grammarAccess.getBlockExpressionAccess().getGroup(), "rule__BlockExpression__Group__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_0(), "rule__VariableDef__Group_0__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_0_1(), "rule__VariableDef__Group_0_1__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_0_1_1(), "rule__VariableDef__Group_0_1_1__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_1(), "rule__VariableDef__Group_1__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_1_2(), "rule__VariableDef__Group_1_2__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup_1_3(), "rule__VariableDef__Group_1_3__0");
			builder.put(grammarAccess.getOperationCallAccess().getGroup(), "rule__OperationCall__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup_2_0(), "rule__TypeDef__Group_2_0__0");
			builder.put(grammarAccess.getEnumDefAccess().getGroup(), "rule__EnumDef__Group__0");
			builder.put(grammarAccess.getEnumItemDefAccess().getGroup(), "rule__EnumItemDef__Group__0");
			builder.put(grammarAccess.getLambdaDefAccess().getGroup(), "rule__LambdaDef__Group__0");
			builder.put(grammarAccess.getLambdaDefAccess().getGroup_2(), "rule__LambdaDef__Group_2__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_0(), "rule__MapDef__Group_0__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_0_0(), "rule__MapDef__Group_0_0__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_0_0_2(), "rule__MapDef__Group_0_0_2__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_0_0_2_1(), "rule__MapDef__Group_0_0_2_1__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_1(), "rule__MapDef__Group_1__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_1_3(), "rule__MapDef__Group_1_3__0");
			builder.put(grammarAccess.getMapDefAccess().getGroup_1_3_1(), "rule__MapDef__Group_1_3_1__0");
			builder.put(grammarAccess.getMapEntryDefAccess().getGroup(), "rule__MapEntryDef__Group__0");
			builder.put(grammarAccess.getMapEntryDefAccess().getGroup_1_0(), "rule__MapEntryDef__Group_1_0__0");
			builder.put(grammarAccess.getMapEntryDefAccess().getGroup_1_1(), "rule__MapEntryDef__Group_1_1__0");
			builder.put(grammarAccess.getListDefAccess().getGroup(), "rule__ListDef__Group__0");
			builder.put(grammarAccess.getNullLiteralAccess().getGroup(), "rule__NullLiteral__Group__0");
			builder.put(grammarAccess.getBoolLiteralAccess().getGroup(), "rule__BoolLiteral__Group__0");
			builder.put(grammarAccess.getDateLiteralAccess().getGroup(), "rule__DateLiteral__Group__0");
			builder.put(grammarAccess.getTimeLiteralAccess().getGroup(), "rule__TimeLiteral__Group__0");
			builder.put(grammarAccess.getDateTimeLiteralAccess().getGroup(), "rule__DateTimeLiteral__Group__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup(), "rule__ListLiteral__Group__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup_2(), "rule__ListLiteral__Group_2__0");
			builder.put(grammarAccess.getListLiteralAccess().getGroup_2_1(), "rule__ListLiteral__Group_2_1__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup(), "rule__MapLiteral__Group__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup_2(), "rule__MapLiteral__Group_2__0");
			builder.put(grammarAccess.getMapLiteralAccess().getGroup_2_1(), "rule__MapLiteral__Group_2_1__0");
			builder.put(grammarAccess.getMapEntryLiteralAccess().getGroup(), "rule__MapEntryLiteral__Group__0");
			builder.put(grammarAccess.getEnumLiteralAccess().getGroup(), "rule__EnumLiteral__Group__0");
			builder.put(grammarAccess.getPatternLiteralAccess().getGroup(), "rule__PatternLiteral__Group__0");
			builder.put(grammarAccess.getPathAccess().getGroup(), "rule__Path__Group__0");
			builder.put(grammarAccess.getQualifiedNameInStaticImportAccess().getGroup(), "rule__QualifiedNameInStaticImport__Group__0");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getImportsAssignment_2(), "rule__Module__ImportsAssignment_2");
			builder.put(grammarAccess.getModuleAccess().getPlugsAssignment_3(), "rule__Module__PlugsAssignment_3");
			builder.put(grammarAccess.getModuleAccess().getDefsAssignment_4_2(), "rule__Module__DefsAssignment_4_2");
			builder.put(grammarAccess.getModuleAccess().getOpersAssignment_5(), "rule__Module__OpersAssignment_5");
			builder.put(grammarAccess.getModuleAccess().getPathsAssignment_6(), "rule__Module__PathsAssignment_6");
			builder.put(grammarAccess.getPlugDslAccess().getNameAssignment_1(), "rule__PlugDsl__NameAssignment_1");
			builder.put(grammarAccess.getPlugDslAccess().getAdaptorAssignment_2(), "rule__PlugDsl__AdaptorAssignment_2");
			builder.put(grammarAccess.getImportOperationAccess().getNameAssignment_0(), "rule__ImportOperation__NameAssignment_0");
			builder.put(grammarAccess.getImportOperationAccess().getModuleAssignment_2(), "rule__ImportOperation__ModuleAssignment_2");
			builder.put(grammarAccess.getImportDefinitionAccess().getDefsAssignment_0_0(), "rule__ImportDefinition__DefsAssignment_0_0");
			builder.put(grammarAccess.getImportDefinitionAccess().getDefsAssignment_0_1_1(), "rule__ImportDefinition__DefsAssignment_0_1_1");
			builder.put(grammarAccess.getImportDefinitionAccess().getModuleAssignment_2(), "rule__ImportDefinition__ModuleAssignment_2");
			builder.put(grammarAccess.getExternalDefAccess().getRefAssignment_0_0(), "rule__ExternalDef__RefAssignment_0_0");
			builder.put(grammarAccess.getExternalDefAccess().getNameAssignment_0_1_1(), "rule__ExternalDef__NameAssignment_0_1_1");
			builder.put(grammarAccess.getExternalDefAccess().getNameAssignment_1(), "rule__ExternalDef__NameAssignment_1");
			builder.put(grammarAccess.getExternalModuleAccess().getRefAssignment_0(), "rule__ExternalModule__RefAssignment_0");
			builder.put(grammarAccess.getExternalModuleAccess().getJavaRefAssignment_1_0(), "rule__ExternalModule__JavaRefAssignment_1_0");
			builder.put(grammarAccess.getSubPathAccess().getNameAssignment_1(), "rule__SubPath__NameAssignment_1");
			builder.put(grammarAccess.getSubPathAccess().getOpersAssignment_3(), "rule__SubPath__OpersAssignment_3");
			builder.put(grammarAccess.getOperationAccess().getIsGetAssignment_1_0(), "rule__Operation__IsGetAssignment_1_0");
			builder.put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
			builder.put(grammarAccess.getOperationAccess().getParamAssignment_3(), "rule__Operation__ParamAssignment_3");
			builder.put(grammarAccess.getOperationAccess().getResultAssignment_4_1(), "rule__Operation__ResultAssignment_4_1");
			builder.put(grammarAccess.getOperationAccess().getBodyAssignment_6(), "rule__Operation__BodyAssignment_6");
			builder.put(grammarAccess.getParamDefAccess().getDefAssignment_0(), "rule__ParamDef__DefAssignment_0");
			builder.put(grammarAccess.getParamDefAccess().getRefAssignment_1(), "rule__ParamDef__RefAssignment_1");
			builder.put(grammarAccess.getVariableDefAccess().getNameAssignment_0_1_0(), "rule__VariableDef__NameAssignment_0_1_0");
			builder.put(grammarAccess.getVariableDefAccess().getTypeAssignment_0_1_1_1(), "rule__VariableDef__TypeAssignment_0_1_1_1");
			builder.put(grammarAccess.getVariableDefAccess().getRightAssignment_0_1_3(), "rule__VariableDef__RightAssignment_0_1_3");
			builder.put(grammarAccess.getVariableDefAccess().getMutAssignment_1_0(), "rule__VariableDef__MutAssignment_1_0");
			builder.put(grammarAccess.getVariableDefAccess().getNameAssignment_1_1(), "rule__VariableDef__NameAssignment_1_1");
			builder.put(grammarAccess.getVariableDefAccess().getTypeAssignment_1_2_1(), "rule__VariableDef__TypeAssignment_1_2_1");
			builder.put(grammarAccess.getVariableDefAccess().getRightAssignment_1_3_1(), "rule__VariableDef__RightAssignment_1_3_1");
			builder.put(grammarAccess.getOperationCallAccess().getAsyncAssignment_0(), "rule__OperationCall__AsyncAssignment_0");
			builder.put(grammarAccess.getOperationCallAccess().getIsGetAssignment_1_0(), "rule__OperationCall__IsGetAssignment_1_0");
			builder.put(grammarAccess.getOperationCallAccess().getRefAssignment_2(), "rule__OperationCall__RefAssignment_2");
			builder.put(grammarAccess.getOperationCallAccess().getParamAssignment_3(), "rule__OperationCall__ParamAssignment_3");
			builder.put(grammarAccess.getTypeDefAccess().getNameAssignment_1(), "rule__TypeDef__NameAssignment_1");
			builder.put(grammarAccess.getTypeDefAccess().getParserAssignment_2_0_0(), "rule__TypeDef__ParserAssignment_2_0_0");
			builder.put(grammarAccess.getTypeDefAccess().getCodeAssignment_2_0_1(), "rule__TypeDef__CodeAssignment_2_0_1");
			builder.put(grammarAccess.getTypeDefAccess().getTypeAssignment_2_1(), "rule__TypeDef__TypeAssignment_2_1");
			builder.put(grammarAccess.getEnumDefAccess().getNameAssignment_1(), "rule__EnumDef__NameAssignment_1");
			builder.put(grammarAccess.getEnumDefAccess().getTypeAssignment_2(), "rule__EnumDef__TypeAssignment_2");
			builder.put(grammarAccess.getEnumDefAccess().getDefsAssignment_5(), "rule__EnumDef__DefsAssignment_5");
			builder.put(grammarAccess.getEnumItemDefAccess().getNameAssignment_0(), "rule__EnumItemDef__NameAssignment_0");
			builder.put(grammarAccess.getEnumItemDefAccess().getValueAssignment_1(), "rule__EnumItemDef__ValueAssignment_1");
			builder.put(grammarAccess.getLambdaDefAccess().getParamAssignment_1(), "rule__LambdaDef__ParamAssignment_1");
			builder.put(grammarAccess.getLambdaDefAccess().getResultAssignment_2_1(), "rule__LambdaDef__ResultAssignment_2_1");
			builder.put(grammarAccess.getElementTypeDefAccess().getRefAssignment_1(), "rule__ElementTypeDef__RefAssignment_1");
			builder.put(grammarAccess.getValueDefAccess().getNativeAssignment_0(), "rule__ValueDef__NativeAssignment_0");
			builder.put(grammarAccess.getMapDefAccess().getDefsAssignment_0_0_2_0(), "rule__MapDef__DefsAssignment_0_0_2_0");
			builder.put(grammarAccess.getMapDefAccess().getDefsAssignment_0_0_2_1_1(), "rule__MapDef__DefsAssignment_0_0_2_1_1");
			builder.put(grammarAccess.getMapDefAccess().getDefsAssignment_1_3_0(), "rule__MapDef__DefsAssignment_1_3_0");
			builder.put(grammarAccess.getMapDefAccess().getDefsAssignment_1_3_1_1(), "rule__MapDef__DefsAssignment_1_3_1_1");
			builder.put(grammarAccess.getMapEntryDefAccess().getNameAssignment_0(), "rule__MapEntryDef__NameAssignment_0");
			builder.put(grammarAccess.getMapEntryDefAccess().getOptAssignment_1_0_0(), "rule__MapEntryDef__OptAssignment_1_0_0");
			builder.put(grammarAccess.getMapEntryDefAccess().getTypeAssignment_1_0_2(), "rule__MapEntryDef__TypeAssignment_1_0_2");
			builder.put(grammarAccess.getMapEntryDefAccess().getValueAssignment_1_1_1(), "rule__MapEntryDef__ValueAssignment_1_1_1");
			builder.put(grammarAccess.getListDefAccess().getTypeAssignment_2(), "rule__ListDef__TypeAssignment_2");
			builder.put(grammarAccess.getLiteralAccess().getPathAssignment_12(), "rule__Literal__PathAssignment_12");
			builder.put(grammarAccess.getBoolLiteralAccess().getIsTrueAssignment_1_1(), "rule__BoolLiteral__IsTrueAssignment_1_1");
			builder.put(grammarAccess.getStrLiteralAccess().getValueAssignment(), "rule__StrLiteral__ValueAssignment");
			builder.put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
			builder.put(grammarAccess.getFltLiteralAccess().getValueAssignment(), "rule__FltLiteral__ValueAssignment");
			builder.put(grammarAccess.getDateLiteralAccess().getValueAssignment_1(), "rule__DateLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getTimeLiteralAccess().getValueAssignment_1(), "rule__TimeLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getDateTimeLiteralAccess().getValueAssignment_1(), "rule__DateTimeLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getListLiteralAccess().getValsAssignment_2_0(), "rule__ListLiteral__ValsAssignment_2_0");
			builder.put(grammarAccess.getListLiteralAccess().getValsAssignment_2_1_1(), "rule__ListLiteral__ValsAssignment_2_1_1");
			builder.put(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0(), "rule__MapLiteral__EntriesAssignment_2_0");
			builder.put(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1(), "rule__MapLiteral__EntriesAssignment_2_1_1");
			builder.put(grammarAccess.getMapEntryLiteralAccess().getNameAssignment_0(), "rule__MapEntryLiteral__NameAssignment_0");
			builder.put(grammarAccess.getMapEntryLiteralAccess().getValueAssignment_2(), "rule__MapEntryLiteral__ValueAssignment_2");
			builder.put(grammarAccess.getEnumLiteralAccess().getRefAssignment_1(), "rule__EnumLiteral__RefAssignment_1");
			builder.put(grammarAccess.getPatternLiteralAccess().getRefAssignment_1(), "rule__PatternLiteral__RefAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EldmDslGrammarAccess grammarAccess;

	@Override
	protected InternalEldmDslParser createParser() {
		InternalEldmDslParser result = new InternalEldmDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new EldmDslTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EldmDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EldmDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
