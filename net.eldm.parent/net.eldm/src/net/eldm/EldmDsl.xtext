grammar net.eldm.EldmDsl hidden(WS, ML_COMMENT, SL_COMMENT)

generate eldmDsl "http://www.eldm.net/EldmDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//TODO: other nice features
// 1. add ways to control the generation output, similar to xtend Active Annotations
// 2. add debug code (only generated in debug build), i.e: #[debug] println("Debug!")

// ------------------------------------------------------------------------------------------------------------------------------
// Module Header
// ------------------------------------------------------------------------------------------------------------------------------
Module:
  'module' name=PathLiteral
  (imports+=Import)*
  (plugs+=PlugDsl)*
  
  ('definitions:'
  BEGIN
    (defs+=Definition)*
    (vars+=Var)*
  END)?
  
  (funcs+=Function)*
  (paths+=SubPath)*
;

Import:
  'import' (path=PathLiteral | (defs+=ExternalDef (',' defs+=ExternalDef)*)) 'from' ref=PathLiteral BREAK
;

  ExternalDef:
    ref=ID ('as' name=ID)? |=> name=ID //TODO: check-if is a valid reference to a Definition ID
  ;

PlugDsl:
  'plug-dsl' name=ID 'from' ref=PathLiteral BREAK
;

// ------------------------------------------------------------------------------------------------------------------------------
// Operations
// ------------------------------------------------------------------------------------------------------------------------------
Function:
  decl=FuncDecl
    body=BlockExpression
;

  FuncDecl:
    //TODO: add pre-conditions/post-conditions
    (type='catch' param=ElementDef?
    | type='def' srv?='service'? (get?='get' | 'set') path=PathLiteral? param=ElementDef? ('->' result=ElementDef)?) ':'
  ;

SubPath:
  'def' path=PathLiteral
  BEGIN
    (funcs+=Function)+
  END
;

// ------------------------------------------------------------------------------------------------------------------------------
// Expressions
// ------------------------------------------------------------------------------------------------------------------------------
BlockExpression: {BlockExpression}
  BEGIN
    (expressions+=Expression)*
  END
;
  Expression: //TODO: add more expressions?
    Identifier
  ;
  
  Identifier:
    Var // | Param
  ;
  
    Var:
      (let?='let' | 'var') name=ID (':' type=ElementDef)? '=' result=ValueExpression
    ;
  
// the result expression must be equivalent to an immutable Literal
ValueExpression:
  OrExpression
;
  OrExpression returns ValueExpression:
    AndExpression (=>({ValueExpression.left=current} feature='or') right=AndExpression)*
  ;
  
  AndExpression returns ValueExpression:
    EqualityExpression (=>({ValueExpression.left=current} feature='and') right=EqualityExpression)*
  ;
  
  EqualityExpression returns ValueExpression:
    RelationalExpression (=>({ValueExpression.left=current} feature=('=='|'!=')) right=RelationalExpression)*
  ;
  
  RelationalExpression returns ValueExpression:
    AdditiveExpression
    ( =>({IsExpression.left=current} feature='is') type=ElementDef
      |=>({ValueExpression.left=current} feature=('>='|'<='|'>'|'<')) right=AdditiveExpression
    )*
  ;
  
  AdditiveExpression returns ValueExpression:
    MultiplicativeExpression (=>({ValueExpression.left=current} feature=('+'|'-'|'set'|'del')) right=MultiplicativeExpression)*
  ;
  
  MultiplicativeExpression returns ValueExpression:
    UnaryOperation (=>({ValueExpression.left=current} feature=('*'|'**'|'/'|'%')) right=UnaryOperation)*
  ;
  
  // UnaryOperation -> (feature operand)
  UnaryOperation returns ValueExpression:
    ({UnaryOperation} feature='!' operand=UnaryOperation)
    | Primary
  ;
  
  Primary:
    value=Literal
    | (cast?='«' type=ElementDef '»')? (ref=ID | '(' exp=ValueExpression ')') calls+=MemberCall*
  ;
   
    MemberCall: ('.'|unknown?='*.') member=ID;

/*
OperationCall:
  async?='async'? (isGet?='get' | 'set') ref=[Operation] param=MapExpression
;

PostfixOperation returns ResultExpression:
  BaseExpression =>({UnaryOperation.operand=current} feature=('++'|'--'))?
;
* */

// ------------------------------------------------------------------------------------------------------------------------------
// Type Definitions
// ------------------------------------------------------------------------------------------------------------------------------

/*LambdaDef:
  '#(' param=ElementDef ('->' result=ElementDef)? ')'
;*/

Definition:
  TypeDef | ExternalDef
;

  TypeDef:
    'typedef' name=ID (
      (parser=('match' | 'mask') code=TEXT)
      | type=TopDef
    )
  ;

TopDef:
  ElementDef | EnumDef
;

  ElementDef:
    native=NativeDef
    | ref=[Definition]
    | ListDef
    | MapDef
  ;

  MapDef:
    => ({MapDef} '{' (defs+=MapEntryDef (',' defs+=MapEntryDef)*)? (',' ext?='*')? '}')
    | ({MapDef} '{'
    BEGIN
      (defs+=MapEntryDef (','? BREAK defs+=MapEntryDef)*)?
      ext?='*'?
    END
    '}')
  ;
  
    MapEntryDef:
      name=ID ((opt?='?'? ':' type=ElementDef) | (opt?='=' value=Literal))?
    ;
  
  ListDef: {ListDef}
    '..' type=ElementDef
  ;
  
  EnumDef:
    'enum' type=MapDef? ':'
    BEGIN
      (defs+=EnumItemDef)+
    END
  ;
  
    EnumItemDef:
      name=ID value=MapLiteral?
    ;
  
NativeDef:
  'any' | 'path'
  | 'bool' | 'str' | 'int' | 'flt'
  | 'lda' | 'ltm' | 'ldt'
  | 'map' | 'lst' | 'enum'
;

// ------------------------------------------------------------------------------------------------------------------------------
// Literals
// ------------------------------------------------------------------------------------------------------------------------------
Literal:
  BoolLiteral
  | StrLiteral
  | IntLiteral
  | FltLiteral
  
  | DateLiteral
  | TimeLiteral
  | DateTimeLiteral
  | PathLiteral
  
  | ListLiteral
  | MapLiteral
  | EnumLiteral
  | PatternLiteral
;
  
  BoolLiteral: {BoolLiteral} ('false' | value?='true');
  StrLiteral: value=TEXT;
  IntLiteral: value=NATURAL;
  FltLiteral: value=FLOAT;
  
  DateLiteral: value=DATE;
  TimeLiteral: value=TIME;
  DateTimeLiteral: value=DATETIME;
  PathLiteral: value=PATH;
  
  ListLiteral: {ListLiteral}
    '[' (vals+=Literal (',' vals+=Literal)*)? ']'
  ;
  
  MapLiteral:
    => ({MapLiteral} '{' (entries+=MapEntryLiteral (',' entries+=MapEntryLiteral)*)? '}')
    | ({MapLiteral} '{'
    BEGIN
      (entries+=MapEntryLiteral ( BREAK entries+=MapEntryLiteral)*)?
    END
    '}')
  ;
  
    MapEntryLiteral:
      name=ID ':' value=Literal
    ;
    
  EnumLiteral: {EnumLiteral}
    '@' ref=[EnumItemDef]
  ;
  
  PatternLiteral: {PatternLiteral}
    (native=NativeDef | ref=[Definition]) '@' text=TEXT
  ;

BREAK: ('\n'|'\r')*;

// ------------------------------------------------------------------------------------------------------------------------------
// Terminals
// ------------------------------------------------------------------------------------------------------------------------------
terminal BEGIN: 'synthetic:BEGIN';
terminal END  : 'synthetic:END';

terminal PATH: ('/'('a'..'z'|'-'|'0'..'9')+)*;
terminal ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'-'|'_'|'0'..'9')*;

terminal INT    : ('0'..'9')+;
terminal NATURAL: '-'? INT;

terminal FLOAT    : NATURAL ('.' INT)?;
terminal DATE     : INT '-' (('0''1'..'9')|('1''0'..'2')) '-' (('0''1'..'9')|('1'..'2''0'..'9')|('3''0'..'1'));
terminal TIME     : (('0'..'1''0'..'9')|('2''0'..'3')) ':' ('0'..'5''0'..'9') ':' ('0'..'5''0'..'9');
terminal DATETIME : DATE 'T' TIME;

terminal TEXT: "'" (!("'"|'\r'|'\n'))* "'" | '"""' -> '"""';

terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS        : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;










/*
Domainmodel:
  importSection=XImportSection?
  elements+=AbstractElement*;

AbstractElement:
  PackageDeclaration | Entity;

PackageDeclaration:
  'package' name=QualifiedName
  BEGIN
    elements+=AbstractElement*
  END;

Entity:
  'entity' name=ValidID
  BEGIN
    features+=Feature*
  END;

Feature:
  Property | Operation;

Property:
  name=ValidID ':' type=JvmTypeReference;

Operation:
  'op' name=ValidID '('(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?')' ':' type=JvmTypeReference 
   body=XBlockExpression;



// Xbase Overrides
// -----------------------------------------------------------------------------------------------------------------------------------
// Operation Expressions
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XExpression returns XExpression:
  XAssignment;

@Override
XAssignment returns XExpression:
  {XAssignment} feature=[types::JvmIdentifiableElement] OpSingleAssign value=XAssignment
  | XOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;

@Override
XOrExpression returns XExpression:
  XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;

@Override
XAndExpression returns XExpression:
  XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;

@Override
XEqualityExpression returns XExpression:
  XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality]) rightOperand=XRelationalExpression)*;

@Override
XRelationalExpression returns XExpression:
  XAdditiveExpression
  (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference
  | =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XAdditiveExpression)*;

@Override
XAdditiveExpression returns XExpression:
  XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd]) rightOperand=XMultiplicativeExpression)*;

@Override
XMultiplicativeExpression returns XExpression:
  XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;

@Override
XUnaryOperation returns XExpression:
  {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
  | XCastedExpression;

@Override
XCastedExpression returns XExpression:
  XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
;

@Override
XPostfixOperation returns XExpression:
  XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
;

@Override
XPrimaryExpression returns XExpression:
  XConstructorCall
  | XBlockExpression
  | XSwitchExpression
  | XFeatureCall
  | XLiteral
  | XIfExpression
  | XForLoopExpression
  | XWhileExpression
  //XThrowExpression
  | XReturnExpression
  //XTryCatchFinallyExpression
  | XParenthesizedExpression;

@Override
XParenthesizedExpression returns XExpression:
  '(' XExpression ')';

@Override
XBlockExpression returns XExpression: 
  {XBlockExpression}
  BEGIN
    (expressions+=XExpressionOrVarDeclaration)*
  END;

@Override
XExpressionOrVarDeclaration returns XExpression:
  XVariableDeclaration | XExpression;

@Override
XVariableDeclaration returns XExpression:
  {XVariableDeclaration}
  ('let' writeable?='mut') (=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID) ('=' right=XExpression)?;

// -----------------------------------------------------------------------------------------------------------------------------------
// Calls and Returns
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XMemberFeatureCall returns XExpression:
  XPrimaryExpression
  (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement] OpSingleAssign) value=XAssignment
  |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."))
    feature=[types::JvmIdentifiableElement]
    (=>explicitOperationCall?='(' (memberCallArguments+=XShortClosure | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')?
    memberCallArguments+=XClosure?
  )*;

@Override
XFeatureCall returns XExpression:
  {XFeatureCall}
  feature=[types::JvmIdentifiableElement]
  (=>explicitOperationCall?='(' (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')?
  featureCallArguments+=XClosure?;

@Override
XConstructorCall returns XExpression:
  {XConstructorCall}
  'new' constructor=[types::JvmConstructor|QualifiedName]
  (=>explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
  arguments+=XClosure?;

@Override
XReturnExpression returns XExpression:
  {XReturnExpression} 'return' (->expression=XExpression)?;

// -----------------------------------------------------------------------------------------------------------------------------------
// Closures
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XShortClosure returns XExpression:
  =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='->') expression=XExpression;

@Override
XClosure returns XExpression:
  =>({XClosure} '#[')
    =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='->')?
    expression=XExpressionInClosure
']';

@Override
XExpressionInClosure returns XExpression:
  {XBlockExpression}
  (expressions+=XExpressionOrVarDeclaration)*
;

// -----------------------------------------------------------------------------------------------------------------------------------
// Control Sequences
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XIfExpression returns XExpression:
  {XIfExpression}
  'if' if=XExpression ':'
    then=XExpression (=>'else:' else=XExpression)?
;

@Override
XForLoopExpression returns XExpression:
  =>({XForLoopExpression} 'for' declaredParam=JvmFormalParameter 'in') forExpression=XExpression ':'
    eachExpression=XExpression
;

@Override
XWhileExpression returns XExpression:
  {XWhileExpression}
  'while' predicate=XExpression ':'
    body=XExpression
;

@Override
XSwitchExpression returns XExpression:
  {XSwitchExpression}
  'switch' switch=XExpression ':'
  BEGIN
    (cases+=XCasePart)*
    ('default' ':' default=XExpression )?
  END
;

@Override
XCasePart:
  {XCasePart}
  typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',')
;

// -----------------------------------------------------------------------------------------------------------------------------------
// Literals
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XLiteral returns XExpression:
  XCollectionLiteral
  //| XMapLiteral
  | XClosure
  
  | XNullLiteral
  | XBooleanLiteral
  | XNumberLiteral
  | XStringLiteral
  //| XTypeLiteral
;

@Override
XNullLiteral returns XExpression:
  {XNullLiteral} 'null';

@Override
XBooleanLiteral returns XExpression:
  {XBooleanLiteral} ('false' | isTrue?='true');

@Override
XNumberLiteral returns XExpression:
  {XNumberLiteral} value=Number;

@Override
XStringLiteral returns XExpression:
  {XStringLiteral} value=STRING;

// -----------------------------------------------------------------------------------------------------------------------------------
// Literals Collections
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
XCollectionLiteral:
  XSetLiteral | XListLiteral
;

@Override
XSetLiteral:
  {XSetLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
;

@Override
XListLiteral:
  {XListLiteral} '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
;

//XMapLiteral:
//  {XMapLiteral} '{' (elements+=XMapLiteralItem (',' elements+=XMapLiteralItem )*)? '}'
//;

//XMapLiteralItem:
//  {XMapLiteralItem} key=ValidID ':' value=XExpression
//;

// -----------------------------------------------------------------------------------------------------------------------------------
// JVM
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
JvmFormalParameter returns types::JvmFormalParameter:
   name=ValidID (':' parameterType=JvmTypeReference)?;

@Override
FullJvmFormalParameter returns types::JvmFormalParameter:
  name=ValidID ':' parameterType=JvmTypeReference;

// -----------------------------------------------------------------------------------------------------------------------------------
// Operators
// -----------------------------------------------------------------------------------------------------------------------------------
@Override
OpSingleAssign: '=';

@Override
OpMultiAssign: '+=' | '-=' | '*=' | '/=' | '%=';

@Override
OpOr: '|';

@Override
OpAnd: '&';

@Override
OpEquality: '==' | '!=';

@Override
OpCompare: '>=' | '<' '=' | '>' | '<' ;

@Override
OpAdd: '+' | '-';

@Override
OpMulti: '*' | '**' | '/' | '%';

@Override
OpUnary: "!" | "-" | "+";

@Override
OpPostfix: "++" | "--" ;

// -----------------------------------------------------------------------------------------------------------------------------------
// @Override
//Number hidden():
//  ('+'|'-')? INT ('.' (INT))?;

// -----------------------------------------------------------------------------------------------------------------------------------
// Terminals
// -----------------------------------------------------------------------------------------------------------------------------------
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

//@Override
//terminal STRING: '"' .* '"';
*/
