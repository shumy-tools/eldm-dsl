package net.eldm.gen

import com.google.inject.Binder
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtext.formatting.ILineSeparatorInformation
import org.eclipse.xtext.parser.IEncodingProvider
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.service.AbstractGenericModule
import org.eclipse.xtext.xtext.generator.model.project.IXtextProjectConfig
import org.eclipse.xtext.xtext.generator.model.project.StandardProjectConfig
import org.eclipse.xtext.xtext.generator.model.project.XtextProjectConfig
import org.eclipse.xtext.xtext.generator.CodeConfig
import org.eclipse.xtext.xtext.generator.Issues

class MyDefaultGeneratorModule extends AbstractGenericModule {
  
  @Accessors
  XtextProjectConfig project = new StandardProjectConfig
  
  @Accessors
  CodeConfig code = new CodeConfig
  
  protected def void checkConfiguration(Issues issues) {
    project.checkConfiguration(issues)
  }
  
  def void configureXtextProjectConfig(Binder binder) {
    binder.bind(IXtextProjectConfig).toInstance(project)
  }
  
  def void configureCodeConfig(Binder binder) {
    binder.bind(CodeConfig).toInstance(code)
  }
  
  def void configureResourceSet(Binder binder) {
    binder.bind(ResourceSet).to(XtextResourceSet)
  }
  
  def void configureLineSeparatorInformation(Binder binder) {
    binder.bind(ILineSeparatorInformation).toInstance[code.lineDelimiter]
  }
  
  def void configureIEncodingProvider(Binder binder) {
    binder.bind(IEncodingProvider).toInstance(new IEncodingProvider.Runtime => [
      defaultEncoding = code.encoding
    ])
  }
  
}
